Syntax:
 - types:
     □                          the 'type' introduced by ∇ and ν
     Context
     ▹
 - terms:
       t @ α
       να. t
       let (να. x) = z in k 

Typings:



   Γ,α:□ ⊢ T[α] : ⋆
---------------------    ∇-form
   Γ ⊢ ∇α. T[α] : ⋆


   Γ,α:□ ⊢ t : T[α]
-------------------------   ∇-intro. 
  Γ ⊢ να. t : ∇α. T[α]

Note that this abstraction cannot be used in types, otherwise linearity (in contexts) is broken.


  Γ ⊢ t : ∇α. T[α]     Γ ⊢ β:□
---------------------------------    ∇-elim (1)
   Γ ⊢ t @ β : T[β]


This rule is probably needed only for comparison of terms; where we
need to instanciate names to the "same" thing.


  Γ, α:□, x:T[α] ⊢  k : C
-----------------------------------------------    ∇-elim (2)
   Γ, z : ∇α. T[α] ⊢ let (να. x) = z in k : C

-- is there a problem destroying a ∇ like this? (I know that this
-- works for linear things, but it seems strange to have ν linear)


-- Linearity is enforced here only, so that contexts are not ambiguous.

  Γ ⊢ a:⋆
-------------------------- Context nil
  Γ ⊢ base a : Context


  Γ ⊢ t : Context
-------------------------- Context cons
  Γ,v:□ ⊢ t ▹ v : Context



   v : Context   a : □   x : a
---------------------------------
       New x : a ▹ v


   v : Context   x : v   a : □
------------------------
  Old x : a ▹ v



­- We can have extra 'goodies' on Contexts if so desired.

Reduction:

(να.t[α]) @ β  ---> t[β]
let (να.x) = (νβ.t) in k[α,x] --> k[β,t]

In the second equation, there's a bit of a problem,
because β is not bound anywhere! So maybe we need a "fresh" construct,
extending scopes and evaluating outwards:

(fresh α in f) x --> fresh α in (f x)

(If we use ν for fresh, the reduction does not conserve the type)

Or: does it hurt to replace β by a unit type?

Or: the variable just becomes free! That's obviously fine if we do
reduction from the outside only; but also fine within
subterms. Indeed, we can always bind the variable at the top level.

We could add a rule, which works only in an empty context and binds
variables of type □.

Examples:

data Tm : Context -> ⋆ where
  var : a -> Tm a
  app : Tm a -> Tm a -> Tm a
  lam : (∇v. Tm (a ▹ v)) → Tm a

apTm = Lam (να. Lam (νβ. App (var (Old (New α))) (var (New β))))




To make this (much) nicer we'd want subtyping (on Contexts)
and an automatic lifter:
 Γ ⊢ c : Context   Γ ⊢ a ∈ c   Γ ⊢ x : a
------------------------------------------
     Γ ⊢ mk x : c

But we can leave that for a second step.

Remarks:

  - Linearity is a rather brittle property; trying to have it only in
    some places is tricky. This seems to indicate that the system should
    be based on linear logic 
